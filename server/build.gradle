apply plugin: 'org.springframework.boot'
apply plugin: 'com.bmuschko.docker-remote-api'

dependencies {
    compile project(':protocol')

    compile 'com.linecorp.armeria:armeria-spring-boot-webflux-starter'
    compile 'com.linecorp.armeria:armeria-grpc'

    compile 'org.springframework.boot:spring-boot-starter-actuator'

    // Spring Data JPA
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'com.h2database:h2'
    runtime 'mysql:mysql-connector-java'

    compile 'com.hubspot.slack:slack-base'

    compile 'com.linecorp.bot:line-bot-model'

    compile 'org.apache.commons:commons-lang3'

    runtime 'ch.qos.logback:logback-classic'
    runtime 'org.slf4j:log4j-over-slf4j'
    runtime 'ch.qos.logback.contrib:logback-json-classic'
    runtime 'ch.qos.logback.contrib:logback-jackson'
}

springBoot {
    buildInfo()
}

docker {
    registryCredentials {
        username = project.hasProperty('dockerUsername') ? dockerUsername : System.getenv('DOCKER_USERNAME')
        password = project.hasProperty('dockerPassword') ? dockerPassword : System.getenv('DOCKER_PASSWORD')
    }
}

task dockerUnpackDependencies(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("$buildDir/docker/dependency")
}

task dockerCopyDockerfile(type: Copy) {
    from("$projectDir/Dockerfile")
    into("$buildDir/docker")
}

import com.bmuschko.gradle.docker.tasks.image.*
task dockerBuildImage(type: DockerBuildImage) {
    dependsOn dockerCopyDockerfile, dockerUnpackDependencies
    inputDir = file("$buildDir/docker")
    buildArgs.put('DEPENDENCY', 'dependency')
    tags.add('delegacy/young-bot-server:latest')
}

task dockerPushImage(type: DockerPushImage) {
    dependsOn dockerBuildImage
    imageName = 'delegacy/young-bot-server'
    tag = 'latest'
}
