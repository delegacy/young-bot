apply plugin: 'org.springframework.boot'
apply plugin: 'com.bmuschko.docker-remote-api'

dependencies {
    implementation project(':common')

    implementation 'com.linecorp.armeria:armeria-spring-boot2-webflux-starter'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    implementation 'com.linecorp.bot:line-bot-api-client'
    implementation 'com.linecorp.bot:line-bot-parser'

    implementation 'com.slack.api:bolt'
    implementation 'javax.websocket:javax.websocket-api'
    runtimeOnly 'org.glassfish.tyrus.bundles:tyrus-standalone-client'

    implementation 'com.google.guava:guava'

    runtimeOnly 'ch.qos.logback:logback-classic'
    runtimeOnly 'org.slf4j:log4j-over-slf4j'
    runtimeOnly 'ch.qos.logback.contrib:logback-json-classic'
    runtimeOnly 'ch.qos.logback.contrib:logback-jackson'
}

jar {
    enabled = true
}

bootJar {
    classifier = 'boot'
}

springBoot {
    buildInfo()
}

docker {
    registryCredentials {
        username = project.hasProperty('dockerUsername') ? dockerUsername : System.getenv('DOCKER_USERNAME')
        password = project.hasProperty('dockerPassword') ? dockerPassword : System.getenv('DOCKER_PASSWORD')
    }
}

task dockerUnpackDependencies(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("$buildDir/docker/dependency")
}

task dockerCopyDockerfile(type: Copy) {
    from("$projectDir/Dockerfile")
    into("$buildDir/docker")
}

import com.bmuschko.gradle.docker.tasks.image.*
task dockerBuildImage(type: DockerBuildImage) {
    dependsOn dockerCopyDockerfile, dockerUnpackDependencies
    inputDir = file("$buildDir/docker")
    buildArgs.put('DEPENDENCY', 'dependency')
    images.add('delegacy/young-bot-server:latest')
}

task dockerPushImage(type: DockerPushImage) {
    dependsOn dockerBuildImage
    images.set(dockerBuildImage.images)
}
